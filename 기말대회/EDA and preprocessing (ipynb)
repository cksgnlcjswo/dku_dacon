{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "from matplotlib import pyplot as plt\n",
    "from matplotlib import rcParams\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "from nltk.tokenize import TweetTokenizer\n",
    "import re\n",
    "import seaborn as sns\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.wordnet import WordNetLemmatizer \n",
    "from nltk.tokenize import word_tokenize\n",
    "# Tweet tokenizer does not split at apostophes which is what we want \n",
    "from nltk.tokenize import TweetTokenizer \n",
    "from nltk.tokenize import word_tokenize  \n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "import warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "rcParams['figure.figsize'] = (16, 8)\n",
    "plt.style.use('fivethirtyeight')\n",
    "pd.set_option('max_columns', 100)\n",
    "pd.set_option(\"display.precision\", 4)\n",
    "warnings.simplefilter('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = Path('../input/')\n",
    "trn_file = data_dir / 'train.csv'\n",
    "tst_file = data_dir / 'test_x.csv'\n",
    "\n",
    "seed = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(54879, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>author</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>He was almost choking. There was so much, so m...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>“Your sister asked for it, I suppose?”</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>She was engaged one day as she walked, in per...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The captain was in the porch, keeping himself ...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>“Have mercy, gentlemen!” odin flung up his han...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  author\n",
       "index                                                           \n",
       "0      He was almost choking. There was so much, so m...       3\n",
       "1                 “Your sister asked for it, I suppose?”       2\n",
       "2       She was engaged one day as she walked, in per...       1\n",
       "3      The captain was in the porch, keeping himself ...       4\n",
       "4      “Have mercy, gentlemen!” odin flung up his han...       3"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trn = pd.read_csv(trn_file, index_col=0)\n",
    "print(trn.shape)\n",
    "trn.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from nltk.corpus import stopwords\n",
    "trn['count_word']=trn[\"text\"].apply(lambda x: len(str(x).split()))\n",
    "#Unique word count\n",
    "trn['count_unique_word']=trn[\"text\"].apply(lambda x: len(set(str(x).split())))\n",
    "#Letter count\n",
    "trn['count_letters']=trn[\"text\"].apply(lambda x: len(str(x)))\n",
    "#punctuation count\n",
    "trn[\"count_punctuations\"] =trn[\"text\"].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\n",
    "#upper case words count\n",
    "trn[\"count_words_upper\"] = trn[\"text\"].apply(lambda x: len([w for w in str(x).split() if w.isupper()]))\n",
    "#Number of stopwords\n",
    "eng_stopwords=set(stopwords.words('english'))\n",
    "trn[\"count_stopwords\"] = trn[\"text\"].apply(lambda x: len([w for w in str(x).lower().split() if w in eng_stopwords]))\n",
    "#Average length of the words\n",
    "trn[\"mean_word_len\"] = trn[\"text\"].apply(lambda x: np.mean([len(w) for w in str(x).split()]))\n",
    "trn['word_unique_percent']=trn['count_unique_word']*100/trn['count_word']\n",
    "#derived features\n",
    "#Punct percent in each comment:\n",
    "trn['punct_percent']=trn['count_punctuations']*100/trn['count_word']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index\n",
       "0        False\n",
       "1        False\n",
       "2        False\n",
       "3        False\n",
       "4        False\n",
       "         ...  \n",
       "54874    False\n",
       "54875    False\n",
       "54876    False\n",
       "54877    False\n",
       "54878    False\n",
       "Length: 54879, dtype: bool"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trn.duplicated('text')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>author</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>460</th>\n",
       "      <td>“O mon amante, O mon désir, Sachons cueillir ...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1490</th>\n",
       "      <td>\"Well... _Vous savez chez nous... En un mot,_ ...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010</th>\n",
       "      <td>She did, however, pay a visit of ceremony to t...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2221</th>\n",
       "      <td>There I was the witness of a revolting scene: ...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2887</th>\n",
       "      <td>The Sire de Malétroit odin to meet them with a...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52009</th>\n",
       "      <td>It was true that she would never have let Dash...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53554</th>\n",
       "      <td>“Never more--from that sweet moment-- Gazéd h...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53923</th>\n",
       "      <td>“Oh, no; oh, no! Not to theology alone, I assu...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53925</th>\n",
       "      <td>\"If... if...\" he faltered feverishly, flushing...</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54595</th>\n",
       "      <td>‘Governor,’ she said, ‘I am going to elope wit...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>129 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  author\n",
       "index                                                           \n",
       "460     “O mon amante, O mon désir, Sachons cueillir ...       4\n",
       "1490   \"Well... _Vous savez chez nous... En un mot,_ ...       3\n",
       "2010   She did, however, pay a visit of ceremony to t...       3\n",
       "2221   There I was the witness of a revolting scene: ...       3\n",
       "2887   The Sire de Malétroit odin to meet them with a...       4\n",
       "...                                                  ...     ...\n",
       "52009  It was true that she would never have let Dash...       3\n",
       "53554   “Never more--from that sweet moment-- Gazéd h...       3\n",
       "53923  “Oh, no; oh, no! Not to theology alone, I assu...       3\n",
       "53925  \"If... if...\" he faltered feverishly, flushing...       3\n",
       "54595  ‘Governor,’ she said, ‘I am going to elope wit...       4\n",
       "\n",
       "[129 rows x 2 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#trn[trn['text'].str.contains(\"é\")]\n",
    "trn[trn['text'].str.contains(\"é\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "단어 집합의 크기: 42331\n",
      "단어 집합의 크기: 42331\n"
     ]
    }
   ],
   "source": [
    "X_data = trn['text']\n",
    "tokenizer = Tokenizer()\n",
    "tokenizer.fit_on_texts(X_data) # 5169개의 행을 가진 X의 각 행에 토큰화를 수행\n",
    "sequences = tokenizer.texts_to_sequences(X_data) # 단어를 숫자값, 인덱스로 변환하여 저장\n",
    "word_to_index = tokenizer.word_index\n",
    "vocab_size = len(word_to_index) + 1\n",
    "print('단어 집합의 크기: {}'.format((vocab_size)))\n",
    "\n",
    "print('단어 집합의 크기: {}'.format((vocab_size)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'the': 1,\n",
       " 'and': 2,\n",
       " 'to': 3,\n",
       " 'of': 4,\n",
       " 'a': 5,\n",
       " 'i': 6,\n",
       " 'in': 7,\n",
       " 'odin': 8,\n",
       " '”': 9,\n",
       " 'he': 10,\n",
       " 'was': 11,\n",
       " 'it': 12,\n",
       " 'you': 13,\n",
       " 'that': 14,\n",
       " 'his': 15,\n",
       " 'with': 16,\n",
       " 'had': 17,\n",
       " 'for': 18,\n",
       " 'as': 19,\n",
       " 'her': 20,\n",
       " 'at': 21,\n",
       " 'not': 22,\n",
       " 'my': 23,\n",
       " 'is': 24,\n",
       " 'but': 25,\n",
       " 'have': 26,\n",
       " 'be': 27,\n",
       " 'she': 28,\n",
       " 'me': 29,\n",
       " 'him': 30,\n",
       " 'said': 31,\n",
       " 'on': 32,\n",
       " 'all': 33,\n",
       " 'so': 34,\n",
       " 'this': 35,\n",
       " 'from': 36,\n",
       " 'by': 37,\n",
       " 'which': 38,\n",
       " 'were': 39,\n",
       " '’': 40,\n",
       " 'there': 41,\n",
       " 'no': 42,\n",
       " 'one': 43,\n",
       " 'what': 44,\n",
       " 'been': 45,\n",
       " 'would': 46,\n",
       " 'we': 47,\n",
       " 'they': 48,\n",
       " 'are': 49,\n",
       " 'your': 50,\n",
       " 'if': 51,\n",
       " 'an': 52,\n",
       " 'very': 53,\n",
       " 'mr': 54,\n",
       " 'could': 55,\n",
       " 'do': 56,\n",
       " 'out': 57,\n",
       " 'will': 58,\n",
       " 'when': 59,\n",
       " 'up': 60,\n",
       " 'or': 61,\n",
       " 'upon': 62,\n",
       " 'them': 63,\n",
       " 'more': 64,\n",
       " 'man': 65,\n",
       " 'now': 66,\n",
       " 'who': 67,\n",
       " 'some': 68,\n",
       " \"'\": 69,\n",
       " 'am': 70,\n",
       " 'know': 71,\n",
       " '“i': 72,\n",
       " 'then': 73,\n",
       " 'into': 74,\n",
       " 'about': 75,\n",
       " 'time': 76,\n",
       " 'little': 77,\n",
       " 'their': 78,\n",
       " 'did': 79,\n",
       " 'only': 80,\n",
       " 'see': 81,\n",
       " 'like': 82,\n",
       " 'before': 83,\n",
       " 'should': 84,\n",
       " 'come': 85,\n",
       " 'must': 86,\n",
       " 'such': 87,\n",
       " 'any': 88,\n",
       " 'than': 89,\n",
       " 'down': 90,\n",
       " 'how': 91,\n",
       " 'has': 92,\n",
       " 'much': 93,\n",
       " 'say': 94,\n",
       " 'good': 95,\n",
       " 'here': 96,\n",
       " 'can': 97,\n",
       " 'well': 98,\n",
       " 'us': 99,\n",
       " 'think': 100,\n",
       " 'again': 101,\n",
       " 'our': 102,\n",
       " 'never': 103,\n",
       " 'too': 104,\n",
       " 'cried': 105,\n",
       " 'may': 106,\n",
       " 'two': 107,\n",
       " 'over': 108,\n",
       " 'sir': 109,\n",
       " 'other': 110,\n",
       " 'go': 111,\n",
       " 'after': 112,\n",
       " 'made': 113,\n",
       " 'himself': 114,\n",
       " 'though': 115,\n",
       " 'old': 116,\n",
       " 'own': 117,\n",
       " 'came': 118,\n",
       " 'great': 119,\n",
       " 'nothing': 120,\n",
       " 'last': 121,\n",
       " 'way': 122,\n",
       " 'thought': 123,\n",
       " 'might': 124,\n",
       " 'hand': 125,\n",
       " 'first': 126,\n",
       " 'back': 127,\n",
       " 'shall': 128,\n",
       " 'long': 129,\n",
       " 'even': 130,\n",
       " 'face': 131,\n",
       " 'day': 132,\n",
       " 'away': 133,\n",
       " 'room': 134,\n",
       " 'mrs': 135,\n",
       " 'house': 136,\n",
       " 'without': 137,\n",
       " 'every': 138,\n",
       " 'once': 139,\n",
       " 'still': 140,\n",
       " 'eyes': 141,\n",
       " 'miss': 142,\n",
       " 'looked': 143,\n",
       " 'asked': 144,\n",
       " 'being': 145,\n",
       " 'went': 146,\n",
       " 'where': 147,\n",
       " 'these': 148,\n",
       " 'make': 149,\n",
       " 'most': 150,\n",
       " 'tell': 151,\n",
       " 'young': 152,\n",
       " 'just': 153,\n",
       " 'head': 154,\n",
       " 'something': 155,\n",
       " 'off': 156,\n",
       " 'take': 157,\n",
       " 'quite': 158,\n",
       " 'myself': 159,\n",
       " '“you': 160,\n",
       " 'night': 161,\n",
       " 'yet': 162,\n",
       " 'look': 163,\n",
       " 'same': 164,\n",
       " 'door': 165,\n",
       " 'why': 166,\n",
       " 'dear': 167,\n",
       " 'another': 168,\n",
       " 'ever': 169,\n",
       " 'life': 170,\n",
       " 'saw': 171,\n",
       " 'don’t': 172,\n",
       " 'mind': 173,\n",
       " 'its': 174,\n",
       " 'heard': 175,\n",
       " 'always': 176,\n",
       " 'moment': 177,\n",
       " 'took': 178,\n",
       " 'put': 179,\n",
       " \"odin's\": 180,\n",
       " '“and': 181,\n",
       " 'seemed': 182,\n",
       " 'three': 183,\n",
       " 'while': 184,\n",
       " 'left': 185,\n",
       " 'prince': 186,\n",
       " 'through': 187,\n",
       " 'give': 188,\n",
       " 'looking': 189,\n",
       " 'began': 190,\n",
       " 'right': 191,\n",
       " 'let': 192,\n",
       " 'better': 193,\n",
       " 'going': 194,\n",
       " 'heart': 195,\n",
       " 'done': 196,\n",
       " 'get': 197,\n",
       " 'many': 198,\n",
       " 'thing': 199,\n",
       " 'place': 200,\n",
       " 'hands': 201,\n",
       " 'odin’s': 202,\n",
       " 'word': 203,\n",
       " 'perhaps': 204,\n",
       " 'soon': 205,\n",
       " 'suddenly': 206,\n",
       " 'replied': 207,\n",
       " 'told': 208,\n",
       " 'found': 209,\n",
       " 'enough': 210,\n",
       " 'father': 211,\n",
       " 'got': 212,\n",
       " 'lady': 213,\n",
       " 'turned': 214,\n",
       " 'those': 215,\n",
       " 'seen': 216,\n",
       " 'knew': 217,\n",
       " 'sure': 218,\n",
       " 'believe': 219,\n",
       " 'friend': 220,\n",
       " 'round': 221,\n",
       " 'side': 222,\n",
       " 'indeed': 223,\n",
       " 'returned': 224,\n",
       " 'course': 225,\n",
       " 'half': 226,\n",
       " 'morning': 227,\n",
       " 'people': 228,\n",
       " 'herself': 229,\n",
       " 'anything': 230,\n",
       " 'men': 231,\n",
       " 'love': 232,\n",
       " 'voice': 233,\n",
       " 'under': 234,\n",
       " 'both': 235,\n",
       " 'woman': 236,\n",
       " '“but': 237,\n",
       " 'whole': 238,\n",
       " 'words': 239,\n",
       " '“what': 240,\n",
       " 'sat': 241,\n",
       " 'far': 242,\n",
       " 'almost': 243,\n",
       " 'however': 244,\n",
       " 'name': 245,\n",
       " 'want': 246,\n",
       " 'home': 247,\n",
       " 'felt': 248,\n",
       " '“it': 249,\n",
       " 'find': 250,\n",
       " 'mother': 251,\n",
       " 'rather': 252,\n",
       " 'whom': 253,\n",
       " 'hear': 254,\n",
       " 'really': 255,\n",
       " 'having': 256,\n",
       " 'against': 257,\n",
       " 'end': 258,\n",
       " 'stood': 259,\n",
       " 'yourself': 260,\n",
       " 'it’s': 261,\n",
       " 'answered': 262,\n",
       " 'matter': 263,\n",
       " 'poor': 264,\n",
       " 'between': 265,\n",
       " 'speak': 266,\n",
       " 'understand': 267,\n",
       " 'gone': 268,\n",
       " 'cannot': 269,\n",
       " 'money': 270,\n",
       " '‘i': 271,\n",
       " 'brought': 272,\n",
       " 'years': 273,\n",
       " 'part': 274,\n",
       " 'because': 275,\n",
       " 'gave': 276,\n",
       " 'hope': 277,\n",
       " 'few': 278,\n",
       " 'together': 279,\n",
       " 'light': 280,\n",
       " 'among': 281,\n",
       " 'mean': 282,\n",
       " 'doctor': 283,\n",
       " 'table': 284,\n",
       " 'set': 285,\n",
       " 'open': 286,\n",
       " 'case': 287,\n",
       " 'boy': 288,\n",
       " 'evening': 289,\n",
       " 'already': 290,\n",
       " 'things': 291,\n",
       " 'new': 292,\n",
       " 'since': 293,\n",
       " 'ask': 294,\n",
       " 'brother': 295,\n",
       " 'taken': 296,\n",
       " 'leave': 297,\n",
       " 'lay': 298,\n",
       " 'hour': 299,\n",
       " \"don't\": 300,\n",
       " 'letter': 301,\n",
       " 'next': 302,\n",
       " 'passed': 303,\n",
       " '“well': 304,\n",
       " 'gentleman': 305,\n",
       " 'business': 306,\n",
       " '“yes': 307,\n",
       " 'world': 308,\n",
       " 'does': 309,\n",
       " 'lord': 310,\n",
       " 'least': 311,\n",
       " 'ye': 312,\n",
       " 'yes': 313,\n",
       " 'family': 314,\n",
       " 'general': 315,\n",
       " 'question': 316,\n",
       " 'days': 317,\n",
       " 'each': 318,\n",
       " 'doubt': 319,\n",
       " '“no': 320,\n",
       " 'answer': 321,\n",
       " 'idea': 322,\n",
       " 'wish': 323,\n",
       " 'sister': 324,\n",
       " 'behind': 325,\n",
       " 'wife': 326,\n",
       " 'everything': 327,\n",
       " '“the': 328,\n",
       " 'towards': 329,\n",
       " 'best': 330,\n",
       " 'oh': 331,\n",
       " 'help': 332,\n",
       " 'else': 333,\n",
       " 'alone': 334,\n",
       " 'remember': 335,\n",
       " 'air': 336,\n",
       " 'master': 337,\n",
       " 'sort': 338,\n",
       " 'point': 339,\n",
       " 'coming': 340,\n",
       " 'nor': 341,\n",
       " 'small': 342,\n",
       " 'keep': 343,\n",
       " 'until': 344,\n",
       " 'god': 345,\n",
       " 'suppose': 346,\n",
       " 'certainly': 347,\n",
       " 'whether': 348,\n",
       " 'manner': 349,\n",
       " 'strange': 350,\n",
       " 'read': 351,\n",
       " 'present': 352,\n",
       " 'short': 353,\n",
       " '“oh': 354,\n",
       " 'added': 355,\n",
       " 'fellow': 356,\n",
       " 'work': 357,\n",
       " 'black': 358,\n",
       " '“that': 359,\n",
       " 'five': 360,\n",
       " 'called': 361,\n",
       " 'says': 362,\n",
       " 'fire': 363,\n",
       " 'less': 364,\n",
       " 'true': 365,\n",
       " 'town': 366,\n",
       " 'kind': 367,\n",
       " 'window': 368,\n",
       " 'till': 369,\n",
       " 'afraid': 370,\n",
       " 'street': 371,\n",
       " 'that’s': 372,\n",
       " 'talk': 373,\n",
       " 'happy': 374,\n",
       " 'often': 375,\n",
       " 'girl': 376,\n",
       " 'aunt': 377,\n",
       " 'walked': 378,\n",
       " 'known': 379,\n",
       " 'spoke': 380,\n",
       " 'child': 381,\n",
       " 'observed': 382,\n",
       " 'dark': 383,\n",
       " 'within': 384,\n",
       " 'chair': 385,\n",
       " 'captain': 386,\n",
       " 'full': 387,\n",
       " 'fact': 388,\n",
       " 'dead': 389,\n",
       " 'friends': 390,\n",
       " \"it's\": 391,\n",
       " 'ill': 392,\n",
       " 'either': 393,\n",
       " 'bed': 394,\n",
       " 'possible': 395,\n",
       " 'reason': 396,\n",
       " 'fell': 397,\n",
       " 'hardly': 398,\n",
       " 'near': 399,\n",
       " 'feel': 400,\n",
       " 'given': 401,\n",
       " 'used': 402,\n",
       " 'call': 403,\n",
       " 'four': 404,\n",
       " 'death': 405,\n",
       " 'times': 406,\n",
       " '“he': 407,\n",
       " 'certain': 408,\n",
       " 'ran': 409,\n",
       " 'white': 410,\n",
       " 'ready': 411,\n",
       " 'kept': 412,\n",
       " 'smile': 413,\n",
       " 'high': 414,\n",
       " 'person': 415,\n",
       " 'struck': 416,\n",
       " 'silence': 417,\n",
       " 'clear': 418,\n",
       " 'rest': 419,\n",
       " 'others': 420,\n",
       " 'country': 421,\n",
       " 'taking': 422,\n",
       " 'hard': 423,\n",
       " 'feet': 424,\n",
       " '“why': 425,\n",
       " 'lost': 426,\n",
       " 'appeared': 427,\n",
       " 'sometimes': 428,\n",
       " 'thousand': 429,\n",
       " 'also': 430,\n",
       " 'strong': 431,\n",
       " 'turn': 432,\n",
       " 'mine': 433,\n",
       " 'large': 434,\n",
       " 'second': 435,\n",
       " 'glad': 436,\n",
       " 'i’ll': 437,\n",
       " 'pleasure': 438,\n",
       " 'hundred': 439,\n",
       " 'making': 440,\n",
       " 'means': 441,\n",
       " 'wanted': 442,\n",
       " 'feeling': 443,\n",
       " 'opened': 444,\n",
       " 'afterwards': 445,\n",
       " 'subject': 446,\n",
       " 'along': 447,\n",
       " 'followed': 448,\n",
       " 'continued': 449,\n",
       " 'doing': 450,\n",
       " 'deal': 451,\n",
       " 'held': 452,\n",
       " 'water': 453,\n",
       " 'ten': 454,\n",
       " 'london': 455,\n",
       " 'above': 456,\n",
       " \"'i\": 457,\n",
       " 'sitting': 458,\n",
       " 'saying': 459,\n",
       " 'met': 460,\n",
       " 'hold': 461,\n",
       " 'eye': 462,\n",
       " 'state': 463,\n",
       " 'fear': 464,\n",
       " 'across': 465,\n",
       " 'bring': 466,\n",
       " 'need': 467,\n",
       " 'forward': 468,\n",
       " '“if': 469,\n",
       " 'cold': 470,\n",
       " 'truth': 471,\n",
       " 'corner': 472,\n",
       " 'thinking': 473,\n",
       " 'company': 474,\n",
       " 'care': 475,\n",
       " 'show': 476,\n",
       " 'low': 477,\n",
       " 'silent': 478,\n",
       " 'walk': 479,\n",
       " 'pretty': 480,\n",
       " 'arm': 481,\n",
       " 'minutes': 482,\n",
       " 'close': 483,\n",
       " 'able': 484,\n",
       " 'run': 485,\n",
       " 'sent': 486,\n",
       " 'son': 487,\n",
       " 'joe': 488,\n",
       " 'arms': 489,\n",
       " 'laughed': 490,\n",
       " 'nature': 491,\n",
       " 'turning': 492,\n",
       " 'body': 493,\n",
       " 'late': 494,\n",
       " 'past': 495,\n",
       " 'use': 496,\n",
       " 'account': 497,\n",
       " 'interest': 498,\n",
       " '“odin': 499,\n",
       " \"that's\": 500,\n",
       " 'ivan': 501,\n",
       " '“my': 502,\n",
       " 'happened': 503,\n",
       " 'became': 504,\n",
       " 'gentlemen': 505,\n",
       " 'ought': 506,\n",
       " 'story': 507,\n",
       " 'children': 508,\n",
       " 'live': 509,\n",
       " 'instant': 510,\n",
       " 'return': 511,\n",
       " 'red': 512,\n",
       " 'standing': 513,\n",
       " 'talking': 514,\n",
       " 'sight': 515,\n",
       " 'repeated': 516,\n",
       " 'paper': 517,\n",
       " 'bad': 518,\n",
       " 'opinion': 519,\n",
       " 'twenty': 520,\n",
       " 'dare': 521,\n",
       " 'ground': 522,\n",
       " '“how': 523,\n",
       " 'blood': 524,\n",
       " 'whose': 525,\n",
       " 'feelings': 526,\n",
       " 'seeing': 527,\n",
       " 'object': 528,\n",
       " 'character': 529,\n",
       " 'sound': 530,\n",
       " 'laughing': 531,\n",
       " 'sit': 532,\n",
       " 'ago': 533,\n",
       " 'attention': 534,\n",
       " 'surprise': 535,\n",
       " 'stopped': 536,\n",
       " 'tried': 537,\n",
       " 'simply': 538,\n",
       " 'visit': 539,\n",
       " 'therefore': 540,\n",
       " 'knows': 541,\n",
       " '‘you': 542,\n",
       " '“there': 543,\n",
       " 'minute': 544,\n",
       " 'different': 545,\n",
       " 'beyond': 546,\n",
       " 'drew': 547,\n",
       " 'party': 548,\n",
       " 'change': 549,\n",
       " 'husband': 550,\n",
       " 'several': 551,\n",
       " 'please': 552,\n",
       " 'hair': 553,\n",
       " 'won’t': 554,\n",
       " 'year': 555,\n",
       " 'immediately': 556,\n",
       " 'deep': 557,\n",
       " 'conversation': 558,\n",
       " 'expression': 559,\n",
       " 'speaking': 560,\n",
       " 'hours': 561,\n",
       " 'soul': 562,\n",
       " 'wonder': 563,\n",
       " 'secret': 564,\n",
       " 'laid': 565,\n",
       " 'sorry': 566,\n",
       " 'odins': 567,\n",
       " 'sudden': 568,\n",
       " 'road': 569,\n",
       " 'impossible': 570,\n",
       " 'bear': 571,\n",
       " '“we': 572,\n",
       " 'creature': 573,\n",
       " 'received': 574,\n",
       " 'can’t': 575,\n",
       " 'themselves': 576,\n",
       " 'neither': 577,\n",
       " 'appearance': 578,\n",
       " 'note': 579,\n",
       " 'stand': 580,\n",
       " 'six': 581,\n",
       " 'didn’t': 582,\n",
       " 'longer': 583,\n",
       " 'none': 584,\n",
       " 'sense': 585,\n",
       " 'carried': 586,\n",
       " 'daughter': 587,\n",
       " 'lips': 588,\n",
       " 'carriage': 589,\n",
       " 'angry': 590,\n",
       " 'sea': 591,\n",
       " 'waiting': 592,\n",
       " 'pass': 593,\n",
       " 'fine': 594,\n",
       " 'purpose': 595,\n",
       " 'married': 596,\n",
       " 'front': 597,\n",
       " 'power': 598,\n",
       " 'honour': 599,\n",
       " 'seems': 600,\n",
       " 'entered': 601,\n",
       " 'tears': 602,\n",
       " 'i’m': 603,\n",
       " 'stay': 604,\n",
       " 'i’ve': 605,\n",
       " 'led': 606,\n",
       " 'besides': 607,\n",
       " 'beside': 608,\n",
       " 'yesterday': 609,\n",
       " 'dinner': 610,\n",
       " 'order': 611,\n",
       " 'seem': 612,\n",
       " 'week': 613,\n",
       " '‘and': 614,\n",
       " 'forth': 615,\n",
       " \"i'll\": 616,\n",
       " 'quiet': 617,\n",
       " '“a': 618,\n",
       " 'likely': 619,\n",
       " 'straight': 620,\n",
       " 'common': 621,\n",
       " 'during': 622,\n",
       " 'perfectly': 623,\n",
       " 'sake': 624,\n",
       " 'early': 625,\n",
       " 'glass': 626,\n",
       " 'jane': 627,\n",
       " 'step': 628,\n",
       " 'later': 629,\n",
       " 'lying': 630,\n",
       " 'laugh': 631,\n",
       " 'morrow': 632,\n",
       " '“then': 633,\n",
       " 'wrong': 634,\n",
       " 'fancy': 635,\n",
       " 'getting': 636,\n",
       " 'cut': 637,\n",
       " 'broke': 638,\n",
       " 'wall': 639,\n",
       " 'foot': 640,\n",
       " 'write': 641,\n",
       " 'meant': 642,\n",
       " 'surprised': 643,\n",
       " '“this': 644,\n",
       " 'book': 645,\n",
       " 'showed': 646,\n",
       " 'wait': 647,\n",
       " 'reached': 648,\n",
       " 'thoughts': 649,\n",
       " 'spirits': 650,\n",
       " 'acquaintance': 651,\n",
       " 'broken': 652,\n",
       " 'usual': 653,\n",
       " 'wind': 654,\n",
       " 'companion': 655,\n",
       " 'garden': 656,\n",
       " 'itself': 657,\n",
       " 'pale': 658,\n",
       " 'meet': 659,\n",
       " 'police': 660,\n",
       " 'comes': 661,\n",
       " 'expected': 662,\n",
       " 'spite': 663,\n",
       " 'dr': 664,\n",
       " 'become': 665,\n",
       " 'imagine': 666,\n",
       " 'horse': 667,\n",
       " 'heavy': 668,\n",
       " 'spirit': 669,\n",
       " 'position': 670,\n",
       " 'walking': 671,\n",
       " 'assure': 672,\n",
       " 'raised': 673,\n",
       " 'save': 674,\n",
       " 'pleased': 675,\n",
       " '“do': 676,\n",
       " 'talked': 677,\n",
       " 'earth': 678,\n",
       " 'floor': 679,\n",
       " 'entirely': 680,\n",
       " 'remained': 681,\n",
       " 'cry': 682,\n",
       " 'stepan': 683,\n",
       " 'happiness': 684,\n",
       " '“is': 685,\n",
       " 'uncle': 686,\n",
       " 'living': 687,\n",
       " 'shook': 688,\n",
       " 'trouble': 689,\n",
       " '“ah': 690,\n",
       " 'particular': 691,\n",
       " 'caught': 692,\n",
       " 'ladies': 693,\n",
       " 'exactly': 694,\n",
       " 'chance': 695,\n",
       " 'wished': 696,\n",
       " 'months': 697,\n",
       " 'women': 698,\n",
       " 'cause': 699,\n",
       " 'anxious': 700,\n",
       " 'beginning': 701,\n",
       " 'moved': 702,\n",
       " 'tone': 703,\n",
       " 'thus': 704,\n",
       " 'box': 705,\n",
       " 'wine': 706,\n",
       " 'real': 707,\n",
       " 'worth': 708,\n",
       " 'there’s': 709,\n",
       " 'society': 710,\n",
       " 'inquired': 711,\n",
       " 'natural': 712,\n",
       " 'fair': 713,\n",
       " 'shoulder': 714,\n",
       " 'remarked': 715,\n",
       " 'circumstances': 716,\n",
       " 'occasion': 717,\n",
       " 'sleep': 718,\n",
       " 'marriage': 719,\n",
       " 'figure': 720,\n",
       " 'lived': 721,\n",
       " 'try': 722,\n",
       " 'notice': 723,\n",
       " 'begin': 724,\n",
       " 'steps': 725,\n",
       " 'exclaimed': 726,\n",
       " 'line': 727,\n",
       " 'obliged': 728,\n",
       " 'murder': 729,\n",
       " 'loved': 730,\n",
       " 'die': 731,\n",
       " 'danger': 732,\n",
       " 'worse': 733,\n",
       " 'directly': 734,\n",
       " 'giving': 735,\n",
       " 'running': 736,\n",
       " 'watch': 737,\n",
       " 'whatever': 738,\n",
       " 'drawing': 739,\n",
       " 'probably': 740,\n",
       " 'madame': 741,\n",
       " 'slowly': 742,\n",
       " \"i've\": 743,\n",
       " 'further': 744,\n",
       " 'forgive': 745,\n",
       " 'length': 746,\n",
       " 'mouth': 747,\n",
       " 'although': 748,\n",
       " 'seven': 749,\n",
       " 'ha': 750,\n",
       " 'dora': 751,\n",
       " 'service': 752,\n",
       " 'died': 753,\n",
       " 'court': 754,\n",
       " 'hat': 755,\n",
       " 'latter': 756,\n",
       " 'whispered': 757,\n",
       " 'send': 758,\n",
       " 'fall': 759,\n",
       " 'office': 760,\n",
       " 'respect': 761,\n",
       " 'lie': 762,\n",
       " 'fortune': 763,\n",
       " 'listened': 764,\n",
       " 'roubles': 765,\n",
       " 'serious': 766,\n",
       " 'direction': 767,\n",
       " 'except': 768,\n",
       " 'stone': 769,\n",
       " 'knowledge': 770,\n",
       " 'muttered': 771,\n",
       " 'written': 772,\n",
       " 'arrived': 773,\n",
       " 'particularly': 774,\n",
       " 'allow': 775,\n",
       " 'passage': 776,\n",
       " 'play': 777,\n",
       " 'forgotten': 778,\n",
       " '“it’s': 779,\n",
       " 'public': 780,\n",
       " 'thank': 781,\n",
       " 'trust': 782,\n",
       " 'self': 783,\n",
       " 'quickly': 784,\n",
       " 'extraordinary': 785,\n",
       " 'settled': 786,\n",
       " 'yours': 787,\n",
       " 'trying': 788,\n",
       " 'comfort': 789,\n",
       " 'smiling': 790,\n",
       " 'reply': 791,\n",
       " 'papers': 792,\n",
       " 'distance': 793,\n",
       " 'drink': 794,\n",
       " 'forget': 795,\n",
       " 'cross': 796,\n",
       " 'necessary': 797,\n",
       " 'news': 798,\n",
       " 'marry': 799,\n",
       " 'effect': 800,\n",
       " 'burst': 801,\n",
       " 'listen': 802,\n",
       " 'stairs': 803,\n",
       " 'convinced': 804,\n",
       " 'coat': 805,\n",
       " 'gate': 806,\n",
       " 'wild': 807,\n",
       " 'view': 808,\n",
       " 'follow': 809,\n",
       " 'tea': 810,\n",
       " 'easy': 811,\n",
       " 'pay': 812,\n",
       " 'consider': 813,\n",
       " 'third': 814,\n",
       " 'believed': 815,\n",
       " 'bit': 816,\n",
       " 'terrible': 817,\n",
       " 'ashamed': 818,\n",
       " 'heaven': 819,\n",
       " 'meeting': 820,\n",
       " 'especially': 821,\n",
       " 'anyone': 822,\n",
       " 'seat': 823,\n",
       " 'curiosity': 824,\n",
       " 'hall': 825,\n",
       " 'absolutely': 826,\n",
       " 'breath': 827,\n",
       " 'determined': 828,\n",
       " 'church': 829,\n",
       " 'situation': 830,\n",
       " 'knowing': 831,\n",
       " 'closed': 832,\n",
       " 'leaving': 833,\n",
       " 'smiled': 834,\n",
       " 'silver': 835,\n",
       " '“to': 836,\n",
       " 'top': 837,\n",
       " 'duty': 838,\n",
       " 'shaking': 839,\n",
       " \"i'm\": 840,\n",
       " 'changed': 841,\n",
       " 'instantly': 842,\n",
       " 'engaged': 843,\n",
       " 'scarcely': 844,\n",
       " 'age': 845,\n",
       " 'shouted': 846,\n",
       " 'quick': 847,\n",
       " 'letters': 848,\n",
       " 'bound': 849,\n",
       " 'anne': 850,\n",
       " 'evidently': 851,\n",
       " 'judge': 852,\n",
       " 'supposed': 853,\n",
       " 'aware': 854,\n",
       " 'servant': 855,\n",
       " 'surely': 856,\n",
       " 'beg': 857,\n",
       " 'fodin': 858,\n",
       " 'instead': 859,\n",
       " 'started': 860,\n",
       " 'wood': 861,\n",
       " 'dress': 862,\n",
       " 'future': 863,\n",
       " 'spoken': 864,\n",
       " 'expect': 865,\n",
       " 'scene': 866,\n",
       " 'sun': 867,\n",
       " 'nearly': 868,\n",
       " 'pleasant': 869,\n",
       " 'desire': 870,\n",
       " 'clothes': 871,\n",
       " 'piece': 872,\n",
       " 'english': 873,\n",
       " 'plain': 874,\n",
       " 'pray': 875,\n",
       " 'fit': 876,\n",
       " 'free': 877,\n",
       " 'beautiful': 878,\n",
       " 'looks': 879,\n",
       " 'agreeable': 880,\n",
       " 'twice': 881,\n",
       " 'presence': 882,\n",
       " 'understood': 883,\n",
       " 'fixed': 884,\n",
       " 'glance': 885,\n",
       " 'questions': 886,\n",
       " 'grew': 887,\n",
       " 'stop': 888,\n",
       " 'confidence': 889,\n",
       " 'fresh': 890,\n",
       " 'shut': 891,\n",
       " 'pulled': 892,\n",
       " 'dropped': 893,\n",
       " 'threw': 894,\n",
       " 'human': 895,\n",
       " 'evidence': 896,\n",
       " 'frightened': 897,\n",
       " 'he’s': 898,\n",
       " 'green': 899,\n",
       " '“not': 900,\n",
       " 'shot': 901,\n",
       " 'england': 902,\n",
       " 'sign': 903,\n",
       " 'law': 904,\n",
       " 'outside': 905,\n",
       " 'train': 906,\n",
       " 'contrary': 907,\n",
       " 'mad': 908,\n",
       " 'former': 909,\n",
       " 'windows': 910,\n",
       " 'somewhat': 911,\n",
       " 'rooms': 912,\n",
       " 'affection': 913,\n",
       " 'carry': 914,\n",
       " 'safe': 915,\n",
       " 'difficult': 916,\n",
       " 'bright': 917,\n",
       " 'reading': 918,\n",
       " 'jew': 919,\n",
       " 'single': 920,\n",
       " 'paid': 921,\n",
       " 'evil': 922,\n",
       " 'greater': 923,\n",
       " 'appear': 924,\n",
       " 'strength': 925,\n",
       " 'grave': 926,\n",
       " \"won't\": 927,\n",
       " 'dog': 928,\n",
       " 'candle': 929,\n",
       " 'dreadful': 930,\n",
       " 'remembered': 931,\n",
       " 'quarter': 932,\n",
       " 'nobody': 933,\n",
       " 'sofa': 934,\n",
       " 'spot': 935,\n",
       " 'observe': 936,\n",
       " 'dressed': 937,\n",
       " 'farther': 938,\n",
       " 'devil': 939,\n",
       " 'speech': 940,\n",
       " 'satisfaction': 941,\n",
       " 'ourselves': 942,\n",
       " 'horses': 943,\n",
       " 'form': 944,\n",
       " 'private': 945,\n",
       " 'trees': 946,\n",
       " 'boys': 947,\n",
       " 'nonsense': 948,\n",
       " 'bell': 949,\n",
       " 'fool': 950,\n",
       " 'pride': 951,\n",
       " 'stranger': 952,\n",
       " 'delighted': 953,\n",
       " 'horror': 954,\n",
       " 'tall': 955,\n",
       " 'ship': 956,\n",
       " 'miles': 957,\n",
       " 'countenance': 958,\n",
       " 'easily': 959,\n",
       " 'ah': 960,\n",
       " 'o’clock': 961,\n",
       " 'ears': 962,\n",
       " 'prisoner': 963,\n",
       " 'drawn': 964,\n",
       " 'occurred': 965,\n",
       " 'influence': 966,\n",
       " 'number': 967,\n",
       " 'excellent': 968,\n",
       " 'mention': 969,\n",
       " 'offer': 970,\n",
       " 'facts': 971,\n",
       " 'important': 972,\n",
       " 'tongue': 973,\n",
       " 'pity': 974,\n",
       " 'blue': 975,\n",
       " 'hot': 976,\n",
       " \"can't\": 977,\n",
       " 'shoulders': 978,\n",
       " 'handsome': 979,\n",
       " 'terror': 980,\n",
       " 'complete': 981,\n",
       " 'fond': 982,\n",
       " '“they': 983,\n",
       " 'journey': 984,\n",
       " 'touch': 985,\n",
       " '“she': 986,\n",
       " 'spent': 987,\n",
       " 'beauty': 988,\n",
       " 'promise': 989,\n",
       " 'sharp': 990,\n",
       " 'crime': 991,\n",
       " 'considered': 992,\n",
       " 'break': 993,\n",
       " 'curious': 994,\n",
       " 'someone': 995,\n",
       " 'satisfied': 996,\n",
       " 'altogether': 997,\n",
       " 'waited': 998,\n",
       " 'mere': 999,\n",
       " 'eight': 1000,\n",
       " ...}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word_to_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "등장 빈도가 1번 이하인 희귀 단어의 수: 16347\n",
      "단어 집합(vocabulary)에서 희귀 단어의 비율: 38.61800141743444\n",
      "전체 등장 빈도에서 희귀 단어 등장 빈도 비율: 0.6867015891552651\n"
     ]
    }
   ],
   "source": [
    "threshold = 2\n",
    "total_cnt = len(word_to_index) # 단어의 수\n",
    "rare_cnt = 0 # 등장 빈도수가 threshold보다 작은 단어의 개수를 카운트\n",
    "total_freq = 0 # 훈련 데이터의 전체 단어 빈도수 총 합\n",
    "rare_freq = 0 # 등장 빈도수가 threshold보다 작은 단어의 등장 빈도수의 총 합\n",
    "\n",
    "# 단어와 빈도수의 쌍(pair)을 key와 value로 받는다.\n",
    "for key, value in tokenizer.word_counts.items():\n",
    "    total_freq = total_freq + value\n",
    "\n",
    "    # 단어의 등장 빈도수가 threshold보다 작으면\n",
    "    if(value < threshold):\n",
    "        rare_cnt = rare_cnt + 1\n",
    "        rare_freq = rare_freq + value\n",
    "\n",
    "print('등장 빈도가 %s번 이하인 희귀 단어의 수: %s'%(threshold - 1, rare_cnt))\n",
    "print(\"단어 집합(vocabulary)에서 희귀 단어의 비율:\", (rare_cnt / total_cnt)*100)\n",
    "print(\"전체 등장 빈도에서 희귀 단어 등장 빈도 비율:\", (rare_freq / total_freq)*100)\n",
    "#희귀 단어 비율 0.6%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "메일의 최대 길이 : 472\n",
      "메일의 평균 길이 : 42.933381\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "\n",
    "X_data = trn['text']\n",
    "tokenizer =Tokenizer(num_words=20000)\n",
    "tokenizer.fit_on_texts(X_data) #  X의 각 행에 토큰화를 수행\n",
    "sequences = tokenizer.texts_to_sequences(X_data) # 단어를 숫자값, 인덱스로 변환하여 저장\n",
    "\n",
    "X_data = sequences\n",
    "print('문장의 최대 길이 : %d' % max(len(l) for l in X_data))\n",
    "print('문장의 평균 길이 : %f' % (sum(map(len, X_data))/len(X_data)))\n",
    "plt.hist([len(s) for s in X_data], bins=50)\n",
    "plt.xlabel('length of samples')\n",
    "plt.ylabel('number of samples')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "temp = trn.groupby(['author']).count().reset_index()\n",
    "temp.columns = ['author', 'count']\n",
    "size = list(temp['count'])\n",
    "\n",
    "source_labels = temp['author']\n",
    "source_counts = temp['count']\n",
    "\n",
    "# Make square figures and axes\n",
    "plt.figure(1, figsize=(20,10))\n",
    "\n",
    "cmap = plt.get_cmap('Spectral')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 5)]\n",
    "source_pie = plt.pie(source_counts, labels=source_labels, autopct='%1.1f%%', shadow=True, colors=colors)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "#0번과 4번 2번이 비중이 많음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unhashable type: 'list'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-4e13e858c457>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtmp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrn\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'text'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mfdist1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnltk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFreqDist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mfdist1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmost_common\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/home/cksgnlcjswo/anaconda3/envs/py37/lib/python3.7/site-packages/nltk/probability.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, samples)\u001b[0m\n\u001b[1;32m    102\u001b[0m         \u001b[0;34m:\u001b[0m\u001b[0mtype\u001b[0m \u001b[0msamples\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSequence\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m         \"\"\"\n\u001b[0;32m--> 104\u001b[0;31m         \u001b[0mCounter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msamples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    106\u001b[0m         \u001b[0;31m# Cached number of samples in this FreqDist\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/home/cksgnlcjswo/anaconda3/envs/py37/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(*args, **kwds)\u001b[0m\n\u001b[1;32m    566\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'expected at most 1 arguments, got %d'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    567\u001b[0m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 568\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    569\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    570\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__missing__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/home/cksgnlcjswo/anaconda3/envs/py37/lib/python3.7/site-packages/nltk/probability.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    140\u001b[0m         \"\"\"\n\u001b[1;32m    141\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_N\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFreqDist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/home/cksgnlcjswo/anaconda3/envs/py37/lib/python3.7/collections/__init__.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(*args, **kwds)\u001b[0m\n\u001b[1;32m    653\u001b[0m                     \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCounter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# fast path when counter is empty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    654\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 655\u001b[0;31m                 \u001b[0m_count_elements\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    656\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: unhashable type: 'list'"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "_ = sns.color_palette(\"hls\", 8)\n",
    "\n",
    "def get_top_n_words(corpus, n=None):\n",
    "    vec = CountVectorizer().fit(corpus)\n",
    "    bag_of_words = vec.transform(corpus)\n",
    "    sum_words = bag_of_words.sum(axis=0) \n",
    "    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n",
    "    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n",
    "    return words_freq[:n]\n",
    "\n",
    "common_words = get_top_n_words(trn['text'], 20)\n",
    "\n",
    "df2 = pd.DataFrame(common_words, columns = ['detail' , 'count'])\n",
    "df2 = df2.groupby('detail').sum()['count'].sort_values(ascending=False).reset_index()\n",
    "df2.columns = ['word', 'count']\n",
    "\n",
    "df1.merge(df2)\n",
    "\n",
    "\n",
    "plt.figure(figsize=(15,7))\n",
    "ax = sns.barplot('word', y=\"count\", data=df1,\n",
    "                  saturation=.5)\n",
    "\n",
    "_ = ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n",
    "ax.set_xlabel(\"Word (gov_policy + detail)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
